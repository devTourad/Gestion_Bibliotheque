#!/bin/bash

# Script de dÃ©ploiement automatisÃ© pour la BibliothÃ¨que GPI
# Usage: ./deploy.sh [environment]
# Environments: development, staging, production

set -e  # ArrÃªter en cas d'erreur

# Configuration
PROJECT_NAME="bibliotheque-gpi"
DOCKER_COMPOSE_FILE="docker-compose.yml"
BACKUP_DIR="./backups"
LOG_FILE="./logs/deploy.log"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a $LOG_FILE
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a $LOG_FILE
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a $LOG_FILE
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1" | tee -a $LOG_FILE
}

# VÃ©rifier les prÃ©requis
check_prerequisites() {
    log "VÃ©rification des prÃ©requis..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker n'est pas installÃ©"
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose n'est pas installÃ©"
    fi
    
    if ! command -v git &> /dev/null; then
        error "Git n'est pas installÃ©"
    fi
    
    log "PrÃ©requis vÃ©rifiÃ©s âœ“"
}

# CrÃ©er les rÃ©pertoires nÃ©cessaires
create_directories() {
    log "CrÃ©ation des rÃ©pertoires..."
    
    mkdir -p $BACKUP_DIR
    mkdir -p ./logs
    mkdir -p ./media/book_covers
    mkdir -p ./staticfiles
    mkdir -p ./ssl
    
    log "RÃ©pertoires crÃ©Ã©s âœ“"
}

# Sauvegarder la base de donnÃ©es
backup_database() {
    if [ "$ENVIRONMENT" != "development" ]; then
        log "Sauvegarde de la base de donnÃ©es..."
        
        BACKUP_FILE="$BACKUP_DIR/backup_$(date +%Y%m%d_%H%M%S).sql"
        
        if docker-compose ps db | grep -q "Up"; then
            docker-compose exec -T db pg_dump -U gpi_user bibliotheque_gpi > $BACKUP_FILE
            log "Sauvegarde crÃ©Ã©e: $BACKUP_FILE âœ“"
        else
            warning "Base de donnÃ©es non accessible, sauvegarde ignorÃ©e"
        fi
    fi
}

# Mettre Ã  jour le code
update_code() {
    log "Mise Ã  jour du code..."
    
    if [ -d ".git" ]; then
        git fetch origin
        git pull origin main
        log "Code mis Ã  jour âœ“"
    else
        warning "Pas de repository Git dÃ©tectÃ©"
    fi
}

# Construire les images Docker
build_images() {
    log "Construction des images Docker..."
    
    docker-compose build --no-cache
    log "Images construites âœ“"
}

# DÃ©marrer les services
start_services() {
    log "DÃ©marrage des services..."
    
    # ArrÃªter les services existants
    docker-compose down
    
    # DÃ©marrer les services
    docker-compose up -d
    
    # Attendre que les services soient prÃªts
    log "Attente du dÃ©marrage des services..."
    sleep 30
    
    # VÃ©rifier que les services sont en cours d'exÃ©cution
    if docker-compose ps | grep -q "Up"; then
        log "Services dÃ©marrÃ©s âœ“"
    else
        error "Ã‰chec du dÃ©marrage des services"
    fi
}

# ExÃ©cuter les migrations
run_migrations() {
    log "ExÃ©cution des migrations..."
    
    docker-compose exec -T web python manage.py migrate
    log "Migrations exÃ©cutÃ©es âœ“"
}

# Collecter les fichiers statiques
collect_static() {
    log "Collection des fichiers statiques..."
    
    docker-compose exec -T web python manage.py collectstatic --noinput
    log "Fichiers statiques collectÃ©s âœ“"
}

# CrÃ©er un superutilisateur (dÃ©veloppement uniquement)
create_superuser() {
    if [ "$ENVIRONMENT" = "development" ]; then
        log "CrÃ©ation du superutilisateur..."
        
        docker-compose exec web python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@gpi.mr', 'admin123')
    print('Superutilisateur crÃ©Ã©: admin/admin123')
else:
    print('Superutilisateur existe dÃ©jÃ ')
"
        log "Superutilisateur configurÃ© âœ“"
    fi
}

# Charger les donnÃ©es de test (dÃ©veloppement uniquement)
load_test_data() {
    if [ "$ENVIRONMENT" = "development" ]; then
        log "Chargement des donnÃ©es de test..."
        
        if [ -f "fixtures/sample_data.json" ]; then
            docker-compose exec -T web python manage.py loaddata fixtures/sample_data.json
            log "DonnÃ©es de test chargÃ©es âœ“"
        else
            warning "Fichier de donnÃ©es de test non trouvÃ©"
        fi
    fi
}

# VÃ©rifier la santÃ© de l'application
health_check() {
    log "VÃ©rification de la santÃ© de l'application..."
    
    # Attendre que l'application soit prÃªte
    sleep 10
    
    # Tester la page d'accueil
    if curl -f http://localhost:8000/ > /dev/null 2>&1; then
        log "Application accessible âœ“"
    else
        error "Application non accessible"
    fi
    
    # Tester l'API
    if curl -f http://localhost:8000/api/ > /dev/null 2>&1; then
        log "API accessible âœ“"
    else
        warning "API non accessible"
    fi
}

# Nettoyer les anciennes images
cleanup() {
    log "Nettoyage des anciennes images..."
    
    docker image prune -f
    docker volume prune -f
    
    log "Nettoyage terminÃ© âœ“"
}

# Afficher les informations de dÃ©ploiement
show_info() {
    log "=== DÃ‰PLOIEMENT TERMINÃ‰ ==="
    info "Environnement: $ENVIRONMENT"
    info "Application: http://localhost:8000"
    info "Admin: http://localhost:8000/admin"
    
    if [ "$ENVIRONMENT" = "development" ]; then
        info "Superutilisateur: admin / admin123"
    fi
    
    info "Logs: docker-compose logs -f"
    info "ArrÃªter: docker-compose down"
    log "=========================="
}

# Fonction principale
main() {
    ENVIRONMENT=${1:-development}
    
    log "DÃ©but du dÃ©ploiement - Environnement: $ENVIRONMENT"
    
    check_prerequisites
    create_directories
    backup_database
    update_code
    build_images
    start_services
    run_migrations
    collect_static
    create_superuser
    load_test_data
    health_check
    cleanup
    show_info
    
    log "DÃ©ploiement terminÃ© avec succÃ¨s! ðŸŽ‰"
}

# Gestion des signaux
trap 'error "DÃ©ploiement interrompu"' INT TERM

# ExÃ©cution
main "$@"
