# Generated by Django 5.1.4 on 2025-06-10 23:24

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='Prénom')),
                ('last_name', models.CharField(max_length=100, verbose_name='Nom')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('death_date', models.DateField(blank=True, null=True, verbose_name='Date de décès')),
                ('biography', models.TextField(blank=True, verbose_name='Biographie')),
                ('nationality', models.CharField(blank=True, max_length=100, verbose_name='Nationalité')),
            ],
            options={
                'verbose_name': 'Auteur',
                'verbose_name_plural': 'Auteurs',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nom du genre')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Genre',
                'verbose_name_plural': 'Genres',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name="Nom de l'éditeur")),
                ('address', models.TextField(blank=True, verbose_name='Adresse')),
                ('website', models.URLField(blank=True, verbose_name='Site web')),
            ],
            options={
                'verbose_name': 'Éditeur',
                'verbose_name_plural': 'Éditeurs',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=15, verbose_name='Numéro de téléphone')),
                ('address', models.TextField(blank=True, verbose_name='Adresse')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('category', models.CharField(choices=[('student', 'Étudiant'), ('teacher', 'Professeur'), ('staff', 'Personnel'), ('external', 'Externe')], default='student', max_length=10, verbose_name='Catégorie')),
                ('registration_date', models.DateTimeField(auto_now_add=True, verbose_name="Date d'inscription")),
                ('is_active_member', models.BooleanField(default=True, verbose_name='Membre actif')),
                ('max_books_allowed', models.IntegerField(default=3, verbose_name='Nombre max de livres autorisés')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300, verbose_name='Titre')),
                ('isbn', models.CharField(max_length=17, unique=True, verbose_name='ISBN')),
                ('publication_date', models.DateField(verbose_name='Date de publication')),
                ('language', models.CharField(choices=[('fr', 'Français'), ('en', 'Anglais'), ('es', 'Espagnol'), ('de', 'Allemand'), ('it', 'Italien'), ('other', 'Autre')], default='fr', max_length=10, verbose_name='Langue')),
                ('pages', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Nombre de pages')),
                ('total_copies', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name="Nombre total d'exemplaires")),
                ('available_copies', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Exemplaires disponibles')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='book_covers/', verbose_name='Image de couverture')),
                ('added_date', models.DateTimeField(auto_now_add=True, verbose_name="Date d'ajout")),
                ('updated_date', models.DateTimeField(auto_now=True, verbose_name='Dernière modification')),
                ('authors', models.ManyToManyField(to='library.author', verbose_name='Auteurs')),
                ('genres', models.ManyToManyField(to='library.genre', verbose_name='Genres')),
                ('publisher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='library.publisher', verbose_name='Éditeur')),
            ],
            options={
                'verbose_name': 'Livre',
                'verbose_name_plural': 'Livres',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Loan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loan_date', models.DateTimeField(auto_now_add=True, verbose_name="Date d'emprunt")),
                ('due_date', models.DateField(verbose_name='Date de retour prévue')),
                ('return_date', models.DateTimeField(blank=True, null=True, verbose_name='Date de retour effective')),
                ('status', models.CharField(choices=[('borrowed', 'Emprunté'), ('returned', 'Rendu'), ('overdue', 'En retard'), ('renewed', 'Renouvelé')], default='borrowed', max_length=10, verbose_name='Statut')),
                ('renewal_count', models.IntegerField(default=0, verbose_name='Nombre de renouvellements')),
                ('max_renewals', models.IntegerField(default=2, verbose_name='Renouvellements maximum autorisés')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loans', to='library.book', verbose_name='Livre')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loans', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Emprunt',
                'verbose_name_plural': 'Emprunts',
                'ordering': ['-loan_date'],
            },
        ),
        migrations.CreateModel(
            name='Fine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fine_type', models.CharField(choices=[('overdue', 'Retard'), ('damage', 'Dégât'), ('lost', 'Livre perdu'), ('other', 'Autre')], max_length=10, verbose_name="Type d'amende")),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Montant')),
                ('description', models.TextField(verbose_name='Description')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('due_date', models.DateField(verbose_name="Date d'échéance")),
                ('paid_date', models.DateTimeField(blank=True, null=True, verbose_name='Date de paiement')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Payée')),
                ('payment_method', models.CharField(blank=True, max_length=50, verbose_name='Méthode de paiement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fines', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
                ('loan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fines', to='library.loan', verbose_name='Emprunt')),
            ],
            options={
                'verbose_name': 'Amende',
                'verbose_name_plural': 'Amendes',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reservation_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de réservation')),
                ('expiry_date', models.DateTimeField(verbose_name="Date d'expiration")),
                ('status', models.CharField(choices=[('active', 'Active'), ('fulfilled', 'Satisfaite'), ('cancelled', 'Annulée'), ('expired', 'Expirée')], default='active', max_length=10, verbose_name='Statut')),
                ('notification_sent', models.BooleanField(default=False, verbose_name='Notification envoyée')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='library.book', verbose_name='Livre')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Réservation',
                'verbose_name_plural': 'Réservations',
                'ordering': ['reservation_date'],
                'unique_together': {('user', 'book', 'status')},
            },
        ),
    ]
