# Generated by Django 5.1.4 on 2025-06-10 23:53

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('library', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='LibrarySettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_loan_duration', models.IntegerField(default=14, verbose_name="Durée d'emprunt étudiant (jours)")),
                ('teacher_loan_duration', models.IntegerField(default=30, verbose_name="Durée d'emprunt professeur (jours)")),
                ('staff_loan_duration', models.IntegerField(default=21, verbose_name="Durée d'emprunt personnel (jours)")),
                ('external_loan_duration', models.IntegerField(default=7, verbose_name="Durée d'emprunt externe (jours)")),
                ('student_max_books', models.IntegerField(default=3, verbose_name='Nombre max de livres - étudiant')),
                ('teacher_max_books', models.IntegerField(default=10, verbose_name='Nombre max de livres - professeur')),
                ('staff_max_books', models.IntegerField(default=5, verbose_name='Nombre max de livres - personnel')),
                ('external_max_books', models.IntegerField(default=2, verbose_name='Nombre max de livres - externe')),
                ('reservation_duration', models.IntegerField(default=7, verbose_name='Durée de réservation (jours)')),
                ('reservation_hold_duration', models.IntegerField(default=3, verbose_name='Durée de maintien après disponibilité (jours)')),
                ('daily_fine_rate', models.DecimalField(decimal_places=2, default=Decimal('0.50'), max_digits=5, verbose_name='Amende par jour de retard (€)')),
                ('lost_book_multiplier', models.DecimalField(decimal_places=1, default=Decimal('2.0'), max_digits=3, verbose_name='Multiplicateur livre perdu')),
                ('damage_fine_rate', models.DecimalField(decimal_places=2, default=Decimal('10.00'), max_digits=6, verbose_name='Amende dégât minimum (€)')),
                ('enable_book_purchase', models.BooleanField(default=True, verbose_name="Permettre l'achat de livres")),
                ('purchase_discount_student', models.DecimalField(decimal_places=1, default=Decimal('10.0'), max_digits=3, verbose_name='Remise étudiant (%)')),
                ('purchase_discount_staff', models.DecimalField(decimal_places=1, default=Decimal('15.0'), max_digits=3, verbose_name='Remise personnel (%)')),
                ('require_deposit', models.BooleanField(default=False, verbose_name='Exiger une caution')),
                ('deposit_amount', models.DecimalField(decimal_places=2, default=Decimal('20.00'), max_digits=6, verbose_name='Montant de la caution (€)')),
                ('accept_cash', models.BooleanField(default=True, verbose_name='Accepter les espèces')),
                ('accept_card', models.BooleanField(default=True, verbose_name='Accepter les cartes')),
                ('accept_online', models.BooleanField(default=False, verbose_name='Accepter les paiements en ligne')),
            ],
            options={
                'verbose_name': 'Paramètres de la bibliothèque',
                'verbose_name_plural': 'Paramètres de la bibliothèque',
            },
        ),
        migrations.AddField(
            model_name='book',
            name='is_for_sale',
            field=models.BooleanField(default=False, verbose_name='Disponible à la vente'),
        ),
        migrations.AddField(
            model_name='book',
            name='purchase_price',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name="Prix d'achat (€)"),
        ),
        migrations.CreateModel(
            name='BookPurchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantité')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Prix unitaire (€)')),
                ('discount_percentage', models.DecimalField(decimal_places=1, default=Decimal('0.0'), max_digits=3, verbose_name='Remise (%)')),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Prix total (€)')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('confirmed', 'Confirmé'), ('paid', 'Payé'), ('delivered', 'Livré'), ('cancelled', 'Annulé')], default='pending', max_length=10, verbose_name='Statut')),
                ('purchase_date', models.DateTimeField(auto_now_add=True, verbose_name="Date d'achat")),
                ('delivery_address', models.TextField(blank=True, verbose_name='Adresse de livraison')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to='library.book', verbose_name='Livre')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to=settings.AUTH_USER_MODEL, verbose_name='Acheteur')),
            ],
            options={
                'verbose_name': 'Achat de livre',
                'verbose_name_plural': 'Achats de livres',
                'ordering': ['-purchase_date'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_type', models.CharField(choices=[('fine', 'Amende'), ('purchase', 'Achat'), ('deposit', 'Caution'), ('refund', 'Remboursement')], max_length=10, verbose_name='Type de paiement')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Montant (€)')),
                ('payment_method', models.CharField(choices=[('cash', 'Espèces'), ('card', 'Carte bancaire'), ('transfer', 'Virement'), ('online', 'Paiement en ligne'), ('check', 'Chèque')], max_length=10, verbose_name='Méthode de paiement')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('completed', 'Terminé'), ('failed', 'Échoué'), ('refunded', 'Remboursé')], default='pending', max_length=10, verbose_name='Statut')),
                ('transaction_id', models.CharField(blank=True, max_length=100, verbose_name='ID de transaction')),
                ('payment_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de paiement')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('fine', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='library.fine', verbose_name='Amende')),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_payments', to=settings.AUTH_USER_MODEL, verbose_name='Traité par')),
                ('purchase', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='library.bookpurchase', verbose_name='Achat')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Paiement',
                'verbose_name_plural': 'Paiements',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='Deposit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Montant (€)')),
                ('status', models.CharField(choices=[('active', 'Active'), ('returned', 'Rendue'), ('forfeited', 'Confisquée')], default='active', max_length=10, verbose_name='Statut')),
                ('deposit_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de dépôt')),
                ('return_date', models.DateTimeField(blank=True, null=True, verbose_name='Date de retour')),
                ('reason', models.TextField(blank=True, verbose_name='Raison')),
                ('loan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deposits', to='library.loan', verbose_name='Emprunt')),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_deposits', to=settings.AUTH_USER_MODEL, verbose_name='Traité par')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deposits', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
                ('payment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='library.payment', verbose_name='Paiement')),
            ],
            options={
                'verbose_name': 'Caution',
                'verbose_name_plural': 'Cautions',
                'ordering': ['-deposit_date'],
            },
        ),
        migrations.CreateModel(
            name='LoanCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requires_approval', models.BooleanField(default=False, verbose_name='Nécessite une approbation')),
                ('requires_deposit', models.BooleanField(default=False, verbose_name='Nécessite une caution')),
                ('deposit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=6, verbose_name='Montant de la caution (€)')),
                ('max_loan_duration', models.IntegerField(blank=True, null=True, verbose_name="Durée max d'emprunt (jours)")),
                ('renewable', models.BooleanField(default=True, verbose_name='Renouvelable')),
                ('valid_from', models.DateField(verbose_name='Valide à partir du')),
                ('valid_until', models.DateField(blank=True, null=True, verbose_name="Valide jusqu'au")),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loan_conditions', to='library.book', verbose_name='Livre')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_conditions', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loan_conditions', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': "Condition d'emprunt",
                'verbose_name_plural': "Conditions d'emprunt",
                'unique_together': {('user', 'book')},
            },
        ),
    ]
